// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: recipe.sql

package db

import (
	"context"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (
    name, preparation_time_in_mins, difficulty_level, 
    cuisine_type, calorie_count_per_serving,
    servings_count, preparation_steps, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) 
RETURNING id, name, preparation_time_in_mins, difficulty_level, cuisine_type, calorie_count_per_serving, servings_count, preparation_steps, user_id, created_at
`

type CreateRecipeParams struct {
	Name                   string `json:"name"`
	PreparationTimeInMins  int32  `json:"preparation_time_in_mins"`
	DifficultyLevel        int32  `json:"difficulty_level"`
	CuisineType            string `json:"cuisine_type"`
	CalorieCountPerServing int32  `json:"calorie_count_per_serving"`
	ServingsCount          int32  `json:"servings_count"`
	PreparationSteps       string `json:"preparation_steps"`
	UserID                 int64  `json:"user_id"`
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.Name,
		arg.PreparationTimeInMins,
		arg.DifficultyLevel,
		arg.CuisineType,
		arg.CalorieCountPerServing,
		arg.ServingsCount,
		arg.PreparationSteps,
		arg.UserID,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PreparationTimeInMins,
		&i.DifficultyLevel,
		&i.CuisineType,
		&i.CalorieCountPerServing,
		&i.ServingsCount,
		&i.PreparationSteps,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getRecipeByID = `-- name: GetRecipeByID :one
SELECT id, name, preparation_time_in_mins, difficulty_level, cuisine_type, calorie_count_per_serving, servings_count, preparation_steps, user_id, created_at FROM recipes 
WHERE id = $1
`

func (q *Queries) GetRecipeByID(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeByID, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PreparationTimeInMins,
		&i.DifficultyLevel,
		&i.CuisineType,
		&i.CalorieCountPerServing,
		&i.ServingsCount,
		&i.PreparationSteps,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
